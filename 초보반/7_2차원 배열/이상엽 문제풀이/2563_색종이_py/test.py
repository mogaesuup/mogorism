from solution import solve
from util.test_runner import run_fun_solution

test_cases = [
  # 테스트 케이스 1: 색종이가 하나인 경우 (전혀 겹치지 않으므로 넓이 100)
  (
    "1\n"
    "0 0\n",
    "100\n"
  ),
  # 테스트 케이스 2: 두 색종이가 서로 전혀 겹치지 않는 경우
  # 첫 색종이: (0,0) → [0,10)×[0,10), 두 번째: (20,20) → [20,30)×[20,30)
  # 총 넓이 = 100 + 100 = 200
  (
    "2\n"
    "0 0\n"
    "20 20\n",
    "200\n"
  ),
  # 테스트 케이스 3: 두 색종이가 부분적으로 겹치는 경우
  # 첫 색종이: (0,0), 두 번째: (5,5) → 겹치는 영역 [5,10)×[5,10)의 넓이 25
  # 총 넓이 = 100 + 100 - 25 = 175
  (
    "2\n"
    "0 0\n"
    "5 5\n",
    "175\n"
  ),
  # 테스트 케이스 4: 같은 위치에 3장의 색종이를 붙인 경우 (완전히 겹치므로 넓이 100)
  (
    "3\n"
    "0 0\n"
    "0 0\n"
    "0 0\n",
    "100\n"
  ),
  # 테스트 케이스 5: 두 색종이가 경계만 맞닿는 경우 (겹치지 않음)
  # 첫 색종이: (10,10) → [10,20)×[10,20), 두 번째: (20,10) → [20,30)×[10,20)
  # 총 넓이 = 100 + 100 = 200
  (
    "2\n"
    "10 10\n"
    "20 10\n",
    "200\n"
  ),
  # 테스트 케이스 6: 4장의 색종이를 사각형 모양으로 붙인 경우
  # 색종이들이 (0,0), (0,10), (10,0), (10,10)에 붙어 전체 [0,20)×[0,20) 영역을 덮음 → 넓이 400
  (
    "4\n"
    "0 0\n"
    "0 10\n"
    "10 0\n"
    "10 10\n",
    "400\n"
  ),
  # 테스트 케이스 7: 대각선으로 조금씩 겹치는 경우
  # 색종이 A: (1,1), B: (2,2), C: (3,3)
  # 각각 10×10이지만 겹치는 부분들이 있어 총 넓이는 138
  (
    "3\n"
    "1 1\n"
    "2 2\n"
    "3 3\n",
    "138\n"
  ),
  # 테스트 케이스 8: 다섯 장의 색종이를 서로 떨어져 배치한 경우
  # 색종이 위치: (0,0), (5,5), (10,10), (0,10), (10,0)
  # 이들은 부분적으로 겹치면서 전체 [0,20)×[0,20) 영역을 덮으므로 넓이는 400
  (
    "5\n"
    "0 0\n"
    "5 5\n"
    "10 10\n"
    "0 10\n"
    "10 0\n",
    "400\n"
  ),
  # 테스트 케이스 9: 도화지의 오른쪽 상단 모서리 근처에 붙인 경우
  # 색종이들: (90,90) → [90,100)×[90,100), (80,80) → [80,90)×[80,90),
  # (90,80) → [90,100)×[80,90). 이때 [80,90)×[90,100)는 덮이지 않으므로 총 넓이 = 100 + 100 + 100 = 300
  (
    "3\n"
    "90 90\n"
    "80 80\n"
    "90 80\n",
    "300\n"
  ),
  # 테스트 케이스 10 (성능 테스트용): 100장의 색종이를 10×10 격자로 배치 (간격 5)
  # 각 색종이는 (5*i, 5*j) (i,j = 0,...,9)에 붙이며,
  # x좌표는 0부터 45, y좌표도 0부터 45 → 색종이들은 서로 5만큼 겹치므로 전체 덮는 영역은 [0,55)×[0,55)
  # 넓이 = 55×55 = 3025
  (
    "100\n" +
    "\n".join(f"{5 * i} {5 * j}" for i in range(10) for j in range(10)) + "\n",
    "3025\n"
  ),
]


def test():
  for input_data, expected_output in test_cases:
    output = run_fun_solution(input_data, solve)
    assert output == expected_output, f"Input: {input_data!r} Expected: {expected_output!r}, Got: {output!r}"
