from solution import solve
from util.test_runner import run_fun_solution

test_cases = [
    # 테스트 케이스 1: 1x1 행렬
    (
        "1 1\n"
        "5\n"
        "7\n",
        "12\n"
    ),
    # 테스트 케이스 2: 2x2 행렬
    (
        "2 2\n"
        "1 2\n"
        "3 4\n"
        "5 6\n"
        "7 8\n",
        "6 8\n"
        "10 12\n"
    ),
    # 테스트 케이스 3: 2x3 행렬
    (
        "2 3\n"
        "1 2 3\n"
        "4 5 6\n"
        "7 8 9\n"
        "10 11 12\n",
        "8 10 12\n"
        "14 16 18\n"
    ),
    # 테스트 케이스 4: 3x3 행렬 (음수 포함)
    (
        "3 3\n"
        "-1 -2 -3\n"
        "-4 -5 -6\n"
        "-7 -8 -9\n"
        "1 2 3\n"
        "4 5 6\n"
        "7 8 9\n",
        "0 0 0\n"
        "0 0 0\n"
        "0 0 0\n"
    ),
    # 테스트 케이스 5: 1x3 행렬
    (
        "1 3\n"
        "1 2 3\n"
        "4 5 6\n",
        "5 7 9\n"
    ),
    # 테스트 케이스 6: 3x1 행렬
    (
        "3 1\n"
        "1\n"
        "2\n"
        "3\n"
        "4\n"
        "5\n"
        "6\n",
        "5\n"
        "7\n"
        "9\n"
    ),
    # 테스트 케이스 7: 2x2 행렬 (모두 0)
    (
        "2 2\n"
        "0 0\n"
        "0 0\n"
        "0 0\n"
        "0 0\n",
        "0 0\n"
        "0 0\n"
    ),
    # 테스트 케이스 8: 2x3 행렬 (음수, 양수 혼합)
    (
        "2 3\n"
        "-10 20 -30\n"
        "40 -50 60\n"
        "100 -200 300\n"
        "-400 500 -600\n",
        "90 -180 270\n"
        "-360 450 -540\n"
    ),
    # 테스트 케이스 9: 4x4 행렬
    (
        "4 4\n"
        "1 2 3 4\n"
        "5 6 7 8\n"
        "9 10 11 12\n"
        "13 14 15 16\n"
        "16 15 14 13\n"
        "12 11 10 9\n"
        "8 7 6 5\n"
        "4 3 2 1\n",
        "17 17 17 17\n"
        "17 17 17 17\n"
        "17 17 17 17\n"
        "17 17 17 17\n"
    ),
    # 테스트 케이스 10 (성능 테스트용): 10x10 행렬 (행렬 A는 모두 1, 행렬 B는 모두 2)
    (
        "10 10\n" +
        "\n".join(["1 1 1 1 1 1 1 1 1 1" for _ in range(10)]) + "\n" +
        "\n".join(["2 2 2 2 2 2 2 2 2 2" for _ in range(10)]) + "\n",
        "\n".join(["3 3 3 3 3 3 3 3 3 3" for _ in range(10)]) + "\n"
    ),
]


def test():
  for input_data, expected_output in test_cases:
    output = run_fun_solution(input_data, solve)
    assert output == expected_output, f"Input: {input_data!r} Expected: {expected_output!r}, Got: {output!r}"
